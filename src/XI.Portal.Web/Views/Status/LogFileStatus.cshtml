@inject IAuthorizationService AuthorizationService
@using Microsoft.AspNetCore.Authorization
@using XI.Portal.Auth.Contract.Constants
@using XI.Portal.Web.Extensions
@model List<XI.Portal.Servers.Dto.FileMonitorDto>

@{
    ViewData["Title"] = "Log File Status";
}

<div class="wrapper wrapper-content animated fadeInRight">

    <div class="alert alert-warning" role="alert">
        <i class="fa fa-warning"></i> This is a legacy feature which will be migrated to the new portal backend in the near future, this is a cut down status until then.
    </div>

    <row class="row">
        <div class="col-12">

            <div class="container-fluid">
                <div class="ibox">
                    <div class="ibox-title">
                        @ViewData["Title"]
                    </div>
                    <div class="ibox-content">
                        A log file will be considered out of sync if:
                        <ul>
                            <li>The last read has been more than 30 minutes ago</li>
                        </ul>
                    </div>
                </div>
            </div>

        </div>
    </row>

    @foreach (var item in Model)
    {
        <row class="row">
            <div class="col-12">

                <div class="container-fluid">
                    <div class="ibox">
                        <div class="ibox-title">
                            <span>
                                @Html.GameTypeIcon(item.GameServer.GameType) @Html.ServerName(item.GameServer.Title, null)
                            </span>
                        </div>
                        <div class="ibox-content">
                            <p>
                                <text><strong>File Path: </strong>ftp://@item.GameServer.FtpHostname@item.FilePath</text><br/>
                                <text>
                                    <strong>Last Read: </strong>@item.LastRead
                                </text>
                                <br/>
                                <br/>

                                @if (item.LastRead < DateTime.UtcNow.AddMinutes(-30))
                                {
                                    <div class="alert alert-danger">Log file monitor has not run in the past 30 minutes</div>
                                }

                                @if ((await AuthorizationService.AuthorizeAsync(User, item.GameServer, AuthPolicies.EditGameServer)).Succeeded)
                                {
                                    <a asp-controller="GameServers" asp-action="Edit" asp-route-id="@item.GameServer.ServerId">
                                        <i class="fa fa-edit"></i> Edit Game Server
                                    </a>
                                }

                                @if ((await AuthorizationService.AuthorizeAsync(User, item, AuthPolicies.EditFileMonitor)).Succeeded)
                                {
                                    <a asp-controller="FileMonitors" asp-action="Edit" asp-route-id="@item.FileMonitorId">
                                        <i class="fa fa-edit"></i> Edit File Monitor
                                    </a>
                                }
                            </p>
                        </div>
                    </div>
                </div>

            </div>
        </row>
    }
</div>