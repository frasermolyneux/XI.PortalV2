@inject IAuthorizationService AuthorizationService
@using Microsoft.AspNetCore.Authorization
@using XI.Portal.Auth.Contract.Constants
@using XI.Portal.Web.Extensions
@model List<XI.Portal.Servers.Dto.LogFileMonitorStateDto>

@{
    ViewData["Title"] = "Log File Status";
}

    <div class="wrapper wrapper-content animated fadeInRight">

        <div class="alert alert-primary" role="alert">
            <i class="fa fa-info-circle"></i> This confirms that the log files that are monitored have been read by the Portal and the player data ingested.
        </div>

        <div class="alert alert-warning" role="alert">
            <i class="fa fa-warning"></i> This page is used for monitoring but at present does not alert. If there is an error displaying below then please contact Sitting-Duc.
        </div>

        <row class="row">
            <div class="col-12">

                <div class="container-fluid">
                    <div class="ibox">
                        <div class="ibox-content">
                            <h2>Log File Monitor Status</h2>

                            <hr />

                            <p>
                                This feature is where the portal gets its player and chat log data from the game servers and also enables commands.
                                There is a process that runs every five seconds that will:
                                <ul>
                                    <li>Get the latest data written to the log file, parse and ingest it</li>
                                </ul>
                            </p>

                            <hr />

                            <h3>When stuff goes wrong</h3>
                            <p>
                                This process is using an FTP request to the game servers to get a 'offset' of the data in the file. This is not a hugely reliable process as the protocol is old and somewhat flaky.
                            </p>
                            <p>
                                If this page shows an error then contact Sitting-Duc for a resolution.
                            </p>

                            <hr />

                            <h3>Conditions for this page showing an error:</h3>
                            <ul>
                                <li>The log file has not been read in the past 5 minutes.</li>
                            </ul>
                        </div>
                    </div>
                </div>

            </div>
        </row>

        @foreach (var item in Model)
        {
            <row class="row">
                <div class="col-12">

                    <div class="container-fluid">
                        <div class="ibox">
                            <div class="ibox-title">
                                <span>
                                    @Html.GameTypeIcon(item.GameType) @Html.ServerName(item.ServerTitle, null)
                                </span>
                            </div>
                            <div class="ibox-content">
                                <p>
                                    <text><strong>File Path: </strong>ftp://@item.FtpHostname@item.FilePath</text><br />
                                    <text>
                                        <strong>Last Read: </strong>@item.LastRead
                                    </text>
                                    <br />
                                    <br />

                                    @if (item.LastRead < DateTime.UtcNow.AddMinutes(-5))
                                    {
                                        <div class="alert alert-danger">Log file monitor has not run in the past 5 minutes</div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-success">Everything looks OK, on the surface at least.</div>
                                    }

                                    <div class="btn-group btn-group-sm" role="group">
                                        @if ((await AuthorizationService.AuthorizeAsync(User, item.GameType, AuthPolicies.EditGameServer)).Succeeded)
                                        {
                                            <a type="button" class="btn btn-primary" asp-controller="GameServers" asp-action="Edit" asp-route-id="@item.ServerId">
                                                <i class="fa fa-edit"></i> Edit Game Server
                                            </a>
                                        }

                                        @if ((await AuthorizationService.AuthorizeAsync(User, item, AuthPolicies.EditFileMonitor)).Succeeded)
                                        {
                                            <a type="button" class="btn btn-primary" asp-controller="FileMonitors" asp-action="Edit" asp-route-id="@item.FileMonitorId">
                                                <i class="fa fa-edit"></i> Edit File Monitor
                                            </a>
                                        }
                                    </div>
                                </p>
                            </div>
                        </div>
                    </div>

                </div>
            </row>
        }
    </div>